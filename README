libbl3mod

C library for Borderlands 3 hotfix mods
By HackerSmacker, licensed under the terms of the GPLv3 license

---- START RIGHT HERE ----
This is the core library for B3MT. If you're just here for BL3 mods, 
look in the "Releases" tab and download the EXEs. If you're here to write
BL3 mods, look below.

Installation on UNIX/Linux/WSL/Cygwin/MacOS/BSD:
After downloading the source, simply run make and make install to
install libbl3mod. The headers will be copied to /usr/local/include/libbl3mod
so you will have to put #include <libbl3mod/bl3mod.h> in your source. The
library will be at /usr/local/lib/libbl3mod.a, so passing -lbl3mod to the
linker or C compiler will link the executable. Note: Users of non-GNU based
systems (so BSD, MacOS, or any System V UNIX) will need to run
"make -f Makefile.bsd" in order to compile everything correctly.

Installation on Windows (Visual Studio):
First, run a command shell that has cl, nmake, link, and lib in your path.
This can be done easily by running the "developer command prompt" for your
version. There is an nmake-compatible Makefile, so running nmake will compile
everything. Then, set INCLUDE and LIB to point to the directories where you
copied the headers and libbl3mod.lib. You need to invoke nmake like this:
nmake -f Makefile.vsc

And now, for the systems nobody in the world is gonna use:

Installation on DOS, OS/2, and Windows (Watcom C/C++):
After putting wmake, wcc386, wlink, and wlib into your shell path and setting
INCLUDE and WATCOM, go ahead and run wmake -f Makefile.watcom to compile
everything. Installation follows the same procedure as Visual Studio - simply
copy the libraries and headers to somewhere and append them to your include
and library paths. 

Installation on VMS:
The package comes with a MAKE_VMS.COM script, simply run it like so: 
@MAKE_VMS and it will compile. From there, you can use LINK and link your
program against the OLB. MMS or DECset is not required.

Installation on VM/CMS (z/VM):
Transfer the files to your mainframe using IND$FILE or FTP. It might be
advisable to use VMA/VMAWin to pack the files into a VMARC, and just extract
that on the frame. The z/VM C/C++ compiler should work. If that doesn't
work, you can use GCCCMS. Since GCCCMS also runs on other OSes, you can
"compile" the libbl3mod code (to s/370 assembly) and then just assemble that
with ASMAHL (high level assembler) or ASSEBMLE (XF assembler). Then, use the
LOAD and INCLUDE commands. Alternatively, you can generate a TXTLIB for the
library, to simplify linking. You can then use LOAD (or INCLUDE) to load
a libbl3mod program, and then use GENMOD to create a CMS load module.

Installation on MVS (z/OS):
Allocate a PDS, and put the source code into it. I have been sure to keep
each line cut at 80, so be sure to allocate your PDS to be FB, 80, like
500 kb, and about 30 directory entries. Use IND$FILE or FTP to store the
source code. If you put the headers in the same PDS as the source, you'll
still have issues resolving where the header files are. Use a command
like this (from TSO) to compile it: 
cc 'userid.src.libbl3mod(somefile)' (search('userid.src.libbl3mod'))
This will put the objects in 'userid.src.libbl3mod.obj' usually.
Really, you should just use GCCMVS or JCC. Use either of those to create
the assembly source conversions of the source code, and use ASMA90
(or IFOX00 if you're on MVS/370 or MVS/SP) and IEWL (or HEWL) to link 
the object code into something useful.

Installation on RSX-11:
(NOTE 3/8/21: not supported)
Like the VMS version, there's a MAKE_RSX.COM to do the dirty work for you. 
Simply follow the same procedure to compile it as you would on VMS, and be
sure to link it against the same OLB library. Using the Task Builder works 
as well, but really the LINK command is way better.
(NOTE: 4/15/21: still not supported)

Notes on some compilers:
- OpenWatcom C/C++ (as of 3/25/21) has an unexplained bug that results in
  weird bugs with extract_object. This issue ONLY applies to the March 2021
  versions of OpenWatcom.
- Visual C/C++ tends to cause unexplained issues. 
- GCC and Clang do not have any issues at all.
- GCCMVS, GCCCMS, and GCCVSE require you to use "dd:output" as the output
  file name. Simply use FILEDEF OUTPUT (VM), //OUTPUT DD (MVS), or
  // ASSGN OUTPUT, // EXTENT, and // DLBL (VSE).
- VMS is fully supported, and features the fewest bugs of any system
  for some unknown reason.
- GCC on x86_64 systems is the primary compile target.